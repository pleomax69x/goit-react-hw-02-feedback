{"version":3,"sources":["components/Section.js","components/Notification.js","components/Statistics.js","components/FeedbackOptions.js","App.js","index.js"],"names":["Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedBackButton","feedback","onLeaveFeedback","type","data-feedback","onClick","FeedBackOptions","options","map","option","data","App","state","hahdleFeedBack","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","positivPercent","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAgBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCHQC,EAHM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCwBEC,EAvBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACGD,EAAQ,GACP,gCACE,uCACQ,+BAAOH,OAEf,0CACW,+BAAOC,OAElB,sCACO,+BAAOC,OAEd,iDAAoBC,EAApB,OACA,oDAAuBC,EAAvB,WAGO,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,0BClBtCO,EAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAClC,OACE,wBAAQC,KAAK,SAASC,gBAAeH,EAAUI,QAASH,EAAxD,SACGD,KAoBQK,EAfS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASL,EAAsB,EAAtBA,gBAClC,OAAOK,EAAQC,KAAI,SAAAC,GAAM,OACvB,cAAC,EAAD,CAEER,SAAUQ,EACVP,gBAAiBA,GAFZO,OCPLC,EAAO,CAAC,OAAQ,UAAW,OA4DlBC,E,4MAzDbC,MAAQ,CACNjB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPgB,eAAiB,YAAiB,IACxBZ,EADuB,EAAba,OACUC,QAApBd,SACR,EAAKe,UAAS,SAAAC,GAAS,sBAAQhB,EAAWgB,EAAUhB,GAAY,O,EASlEiB,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBjB,KADiB,EACXC,QADW,EACFC,K,EAIzBsB,gCAAkC,WAAO,IAC/BxB,EAAS,EAAKiB,MAAdjB,KACFG,EAAQ,EAAKoB,qBACnB,OAAOpB,EAAQsB,KAAKC,MAAM,IAAMvB,GAASH,EAAO,G,4CAGlD,WAAU,IAAD,EACwB2B,KAAKV,MAA5BjB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEjBC,EAAQwB,KAAKJ,qBACbK,EAAiBD,KAAKH,kCAE5B,OACE,qCACE,cAAC,EAAD,CAAS7B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEiB,QAASG,EACTR,gBAAiBoB,KAAKT,mBAI1B,cAAC,EAAD,CAASvB,MAAM,YAAf,SACE,cAAC,EAAD,CACEK,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBwB,a,GAlDdC,aCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9092771c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","const Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\nexport default Notification;\n","import Notification from './Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      {total > 0 && (\n        <div>\n          <p>\n            Good: <span>{good}</span>\n          </p>\n          <p>\n            Neutral: <span>{neutral}</span>\n          </p>\n          <p>\n            Bad: <span>{bad}</span>\n          </p>\n          <p>Total feedback: {total} </p>\n          <p>Positive feedback: {positivePercentage}% </p>\n        </div>\n      )}\n      {total === 0 && <Notification message=\"No feedback given\" />}\n    </>\n  );\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nconst FeedBackButton = ({ feedback, onLeaveFeedback }) => {\n  return (\n    <button type=\"button\" data-feedback={feedback} onClick={onLeaveFeedback}>\n      {feedback}\n    </button>\n  );\n};\n\nconst FeedBackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <FeedBackButton\n      key={option}\n      feedback={option}\n      onLeaveFeedback={onLeaveFeedback}\n    />\n  ));\n};\n\nFeedBackOptions.propTypes = {\n  option: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedBackOptions;\n","import './App.css';\nimport { Component } from 'react';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport FeedBackOptions from './components/FeedbackOptions';\n\nconst data = ['good', 'neutral', 'bad'];\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  hahdleFeedBack = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState(prevState => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  // handleIncGood = () => {\n  //   this.setState((oldState) => ({\n  //     good: oldState.good + 1,\n  //   }));\n  // };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round(100 / total) * good : 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    const total = this.countTotalFeedback();\n    const positivPercent = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedBackOptions\n            options={data}\n            onLeaveFeedback={this.hahdleFeedBack}\n          />\n        </Section>\n\n        <Section title=\"Statistic\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivPercent}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}